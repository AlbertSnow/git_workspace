class Handler {
    def f1() { println "f1 of Handler called ..."}
    def f2() { println "f2 of Handler called ..."}
}
class Example {
    def f1() { println "f1 of Example called ..."}
    def f2() { println "f2 of Example called ..."}
    def foo(closure) {
        closure.delegate = new Handler()
        closure()
    }
}

def f1() { println "f1 of Script called..." }
new Example().foo {
    println it == null? "it is null" : "it is not null"
    f1()
    f2()
}

def examiningClosure(closure) {
    closure()
}
examiningClosure() {
    println "In First Closure:"
    println "class is " + getClass().name
    println "this is " + this + ", super:" + this.getClass().superclass.name
    println "owner is " + owner + ", super:" + owner.getClass().superclass.name
    println "delegate is " + delegate +
            ", super:" + delegate.getClass().superclass.name
    examiningClosure() {
        println "In Closure within the First Closure:"println "class is " + getClass().name
        println "this is " + this + ", super:" + this.getClass().superclass.name
        println "owner is " + owner + ", super:" + owner.getClass().superclass.name
        println "delegate is " + delegate +
                ", super:" + delegate.getClass().superclass.name
    }
}